from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    ConversationHandler
)
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    BotCommand,
    Update,
    ReplyKeyboardRemove
)
from django.conf import settings
from yookassa import Payment, Configuration
import uuid
from django.utils import timezone

from events_bot.models import Event, Participant, Donation, Question, Speaker
from events_bot.views import send_question

(
    CHOOSE_CUSTOM_AMOUNT,
    SELECTING_SPEAKER,
    AWAITING_QUESTION,
    CONFIRMING_QUESTION,
    SELECTING_EVENT,
    CONFIRMING_REGISTRATION,
    SUBSCRIBING,
    MAILING,
    CONFIRMING_MAILING,
    UNSUBSCRIBING,
    SELECTING_EVENT_PARTICIPANT,
    CONFIRMING_PARTICIPANT_REGISTRATION,
    SHOW_MY_EVENTS,
    CONFIRMING_UNREGISTER,
    AWAITING_NAME,
    AWAITING_BIO,
    VIEWING_PROFILE
) = range(17)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa
Configuration.account_id = settings.YOOKASSA_SHOP_ID
Configuration.secret_key = settings.YOOKASSA_SECRET_KEY


def get_main_keyboard(participant):
    """–ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        ["üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
        ["üôã –ü–æ–æ–±—â–∞—Ç—å—Å—è", "üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã" —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤
    if participant.is_speaker:
        keyboard.append(["‚ùì –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã"])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ —Å–ø–∏–∫–µ—Ä–æ–≤
    if participant.is_event_manager:
        keyboard.append(["üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"])

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


def event_menu(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'"""
    user = update.message.from_user
    participant, _ = Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    keyboard = [
        ["üìú –ü—Ä–æ–≥—Ä–∞–º–º–∞", "üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
        ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É"],
        ["üé§ –ö—Ç–æ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–µ–π—á–∞—Å?"],
    ]

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
    if not participant.is_subscribed:
        keyboard.append(["üîô –ù–∞–∑–∞–¥", "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"])
    else:
        keyboard.append(["üîô –ù–∞–∑–∞–¥", "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"])

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


def registration_menu(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'"""
    keyboard = [
        ["üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º"],
        ["üé§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ø–∏–∫–µ—Ä–æ–º"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


def start(update, context):
    user = update.message.from_user
    participant, _ = Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    event = Event.objects.filter(is_active=True).first()
    event_name = event.title if event else "Python Meetup"

    main_menu_keyboard = get_main_keyboard(participant)

    update.message.reply_text(
        f"‚ú® <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b> ‚ú®\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è <i>{event_name}</i>\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ <b>üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b> - –ø—Ä–æ–≥—Ä–∞–º–º–∞, –≤–æ–ø—Ä–æ—Å—ã, —Å–ø–∏–∫–µ—Ä—ã, –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        "‚Ä¢ <b>üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b> - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–ª–∏ —Å–ø–∏–∫–µ—Ä\n"
        "‚Ä¢ <b>üôã –ü–æ–æ–±—â–∞—Ç—å—Å—è</b> - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        "‚Ä¢ <b>üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å</b> - —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_menu_keyboard,
        parse_mode='HTML'
    )


def program(update, context):
    event = Event.objects.filter(is_active=True).first()
    if event:
        program_text = event.get_program()
        update.message.reply_text(
            f"üìú <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
            f"{program_text}\n\n"
            f"<i>–ñ–¥–µ–º –≤–∞—Å {event.date.strftime('%d.%m.%Y')}!</i>",
            parse_mode='HTML'
        )
    else:
        update.message.reply_text(
            "üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏!",
            parse_mode='HTML'
        )


def donate(update, context):
    if not Event.objects.filter(is_active=True).exists():
        update.message.reply_text(
            "üôÖ‚Äç‚ôÇÔ∏è <b>–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n"
            "–î–æ–Ω–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            parse_mode='HTML'
        )
        return

    keyboard = [
        [InlineKeyboardButton("üíµ 100 ‚ÇΩ", callback_data='donate_100')],
        [InlineKeyboardButton("üíµ 300 ‚ÇΩ", callback_data='donate_300')],
        [InlineKeyboardButton("üíµ 500 ‚ÇΩ", callback_data='donate_500')],
        [InlineKeyboardButton(
            "‚ú® –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='donate_custom')],
    ]
    update.message.reply_text(
        "üéÅ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:</b>\n"
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏!",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )


def handle_fixed_donate_callback(update, context):
    query = update.callback_query
    query.answer()

    if not Event.objects.filter(is_active=True).exists():
        query.edit_message_text(
            "üôÖ‚Äç‚ôÇÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
        return ConversationHandler.END

    try:
        amount = int(query.data.split('_')[1])
        create_payment(update, context, amount)
    except (IndexError, ValueError):
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã.")
    return ConversationHandler.END


def handle_custom_donate_callback(update, context):
    query = update.callback_query
    query.answer()

    if not Event.objects.filter(is_active=True).exists():
        query.edit_message_text(
            "üôÖ‚Äç‚ôÇÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞")
        return ConversationHandler.END

    query.edit_message_text(
        "üí´ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö</b>\n"
        "(–æ—Ç 10 –¥–æ 15000):",
        parse_mode='HTML'
    )
    return CHOOSE_CUSTOM_AMOUNT


def handle_custom_amount(update, context):
    try:
        amount = int(update.message.text.strip())
        if amount < 10 or amount > 15000:
            update.message.reply_text(
                "‚ö†Ô∏è <b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 15000 ‚ÇΩ</b>\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:",
                parse_mode='HTML'
            )
            return CHOOSE_CUSTOM_AMOUNT

        create_payment(update, context, amount)
        return ConversationHandler.END

    except ValueError:
        update.message.reply_text(
            "üî¢ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 250 –∏–ª–∏ 1000",
            parse_mode='HTML'
        )
        return CHOOSE_CUSTOM_AMOUNT


def cancel(update, context):
    update.message.reply_text(
        "‚ùå <b>–î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω—ë–Ω</b>\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ",
        parse_mode='HTML'
    )
    return ConversationHandler.END


def create_payment(update, context, amount):
    if update.callback_query:
        user = update.callback_query.from_user
        chat_id = update.callback_query.message.chat_id
    else:
        user = update.message.from_user
        chat_id = update.message.chat_id

    event = Event.objects.filter(is_active=True).first()
    if not event:
        error_msg = "üôÖ‚Äç‚ôÇÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –¥–æ–Ω–∞—Ç–∞"
        if update.callback_query:
            update.callback_query.edit_message_text(error_msg)
        else:
            update.message.reply_text(error_msg)
        return

    participant, _ = Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    try:
        payment = Payment.create({
            "amount": {"value": str(amount), "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{settings.TG_BOT_USERNAME}"
            },
            "description": f"–î–æ–Ω–∞—Ç –Ω–∞ {event.title}",
            "metadata": {
                "user_id": user.id,
                "event_id": event.id
            }
        }, str(uuid.uuid4()))

        Donation.objects.create(
            event=event,
            participant=participant,
            amount=amount,
            payment_id=payment.id,
            is_confirmed=True
        )

        context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ú® <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, {user.first_name}!</b>\n\n"
                 f"–í–∞—à –¥–æ–Ω–∞—Ç {amount}‚ÇΩ ‚Äî —ç—Ç–æ:\n"
                 f"‚Ä¢ ‚òï 10 —á–∞—à–µ–∫ –∫–æ—Ñ–µ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤\n"
                 f"‚Ä¢ üìö –ù–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                 f"‚Ä¢ üíª –õ—É—á—à–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π\n\n"
                 f"<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏!</i>",
            parse_mode='HTML'
        )

        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(
            "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            url=payment.confirmation.confirmation_url
        )]])

        message = f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã {amount} ‚ÇΩ</b>\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        if update.callback_query:
            update.callback_query.edit_message_text(
                message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            context.bot.send_message(
                chat_id, message, reply_markup=reply_markup, parse_mode='HTML')

    except Exception as e:
        error_msg = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n{str(e)}"
        if update.callback_query:
            update.callback_query.edit_message_text(
                error_msg, parse_mode='HTML')
        else:
            context.bot.send_message(chat_id, error_msg, parse_mode='HTML')


def current_speaker(update, context):
    event = Event.objects.filter(is_active=True).first()
    if not event:
        update.message.reply_text(
            "üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            parse_mode='HTML'
        )
        return

    now = timezone.localtime(timezone.now())
    current_slot = event.get_current_speaker()

    if current_slot:
        speaker = current_slot.speaker
        start_time = timezone.localtime(current_slot.start_time)
        end_time = timezone.localtime(current_slot.end_time)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ –ø—Ä–æ–¥–ª–µ–Ω–Ω–æ–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–∏
        extended_note = " (–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º)" if current_slot.is_extended else ""

        update.message.reply_text(
            f"üé§ <b>–°–µ–π—á–∞—Å –≤—ã—Å—Ç—É–ø–∞–µ—Ç:</b>{extended_note}\n\n"
            f"üë§ <b>{speaker.name}</b>\n"
            f"üì¢ <i>{current_slot.title}</i>\n"
            f"üïí {start_time.strftime('%H:%M')}-{end_time.strftime('%H:%M')}\n\n"
            f"{current_slot.description}\n\n"
            f"‚ÑπÔ∏è {speaker.bio if speaker.bio else '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}",
            parse_mode='HTML'
        )
    else:
        update.message.reply_text(
            "‚è≥ <b>–°–µ–π—á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤ –∏–ª–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
            "–°–ª–µ–¥—É—é—â–µ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            parse_mode='HTML'
        )


def get_ask_speaker_keyboard(speakers):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏–∫–µ—Ä–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π —Ç–µ–∫—É—â–µ–≥–æ"""
    keyboard = []
    event = Event.objects.filter(is_active=True).first()
    current_speaker = event.get_current_speaker(
    ).speaker if event and event.get_current_speaker() else None

    for speaker in speakers:
        if speaker.telegram_username:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–ø–∏–∫–µ—Ä
            speaker_label = f"üé§ {speaker.name} (—Å–µ–π—á–∞—Å –≤—ã—Å—Ç—É–ø–∞–µ—Ç)" if current_speaker and speaker.id == current_speaker.id else speaker.name
            keyboard.append(
                [InlineKeyboardButton(
                    speaker_label, callback_data=f"ask_{speaker.telegram_username}")]
            )

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
    return InlineKeyboardMarkup(keyboard)


def ask_speaker_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    event = Event.objects.filter(is_active=True).first()
    if not event:
        update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return ConversationHandler.END

    speakers = event.speakers.all()
    if not speakers:
        update.message.reply_text("–ù–∞ —ç—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –Ω–µ—Ç —Å–ø–∏–∫–µ—Ä–æ–≤")
        return ConversationHandler.END

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_ask_speaker_keyboard(speakers)
    )
    return SELECTING_SPEAKER


def ask_speaker_select(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–∏–∫–µ—Ä–∞"""
    query = update.callback_query
    query.answer()

    if query.data == 'back':
        user = query.from_user
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard(participant))
        except Participant.DoesNotExist:
            query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return ConversationHandler.END

    speaker_username = query.data.split('_', 1)[1]

    try:
        speaker = Speaker.objects.get(telegram_username=speaker_username)
        context.user_data['speaker_username'] = speaker_username
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        context.user_data['speaker_id'] = speaker.id
    except Speaker.DoesNotExist:
        query.edit_message_text("‚ùå –°–ø–∏–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END

    context.user_data['speaker_username'] = speaker_username

    query.edit_message_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ])
    )
    return AWAITING_QUESTION


def ask_speaker_receive_question(update, context):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    question_text = update.message.text
    context.user_data['question_text'] = question_text

    update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{question_text}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ])
    )
    return CONFIRMING_QUESTION


def ask_speaker_confirm(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    query.answer()

    if query.data == 'confirm':
        try:
            speaker_username = context.user_data['speaker_username']

            # –ò—â–µ–º —Å–ø–∏–∫–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –ø–æ telegram_username
            speaker = Speaker.objects.get(telegram_username=speaker_username)

            if not speaker.telegram_id:
                query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: —É —Å–ø–∏–∫–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram ID")
                return ConversationHandler.END

            result = send_question(
                speaker_username=speaker_username,
                participant_id=update.effective_user.id,
                participant_name=update.effective_user.first_name,
                text=context.user_data['question_text']
            )
            query.edit_message_text("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏–∫–µ—Ä—É")
        except Exception as e:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
    else:
        query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")

    return ConversationHandler.END


def ask_speaker_cancel(update, context):
    """–û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    query.answer()
    query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
    return ConversationHandler.END


def setup_speaker_handlers(dp):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å"
    dp.add_handler(CallbackQueryHandler(
        handle_mark_answered,
        pattern='^answer_\\d+$'  # answer_<question_id>
    ))


def handle_mark_answered(update, context):
    query = update.callback_query
    question_id = int(query.data.split('_')[1])
    user = query.from_user

    try:
        question = Question.objects.get(
            id=question_id,
            speaker__telegram_id=user.id  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —Å–ø–∏–∫–µ—Ä
        )
        question.mark_answered()
        query.edit_message_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π")
    except Question.DoesNotExist:
        query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")


def show_unanswered_questions(update, context):
    user = update.effective_user
    try:
        speaker = Speaker.objects.get(telegram_username=user.username)
        questions = speaker.questions.filter(is_answered=False)

        if not questions.exists():
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        for q in questions:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚úÖ –û—Ç–≤–µ—Ç–∏–ª",
                    callback_data=f"answer_{q.id}"
                )]
            ])
            update.message.reply_text(
                f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç {q.participant.name}:\n\n"
                f"{q.text}\n\n"
                f"–ó–∞–¥–∞–Ω: {q.timestamp.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=keyboard
            )
    except Speaker.DoesNotExist:
        update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–∏–∫–µ—Ä.")


def get_events_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –±—É–¥—É—â–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    events = Event.objects.filter(date__gte=timezone.now()).order_by('date')
    keyboard = [
        [InlineKeyboardButton(
            event.get_full_name(),
            callback_data=f"event_{event.id}"
        )]
        for event in events
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')])
    return InlineKeyboardMarkup(keyboard)


def register_speaker_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏–∫–µ—Ä–∞"""
    user = update.effective_user
    try:
        participant = Participant.objects.get(telegram_id=user.id)
    except Participant.DoesNotExist:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    events = Event.objects.filter(date__gte=timezone.now()).exists()

    if not events:
        update.message.reply_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            reply_markup=get_main_keyboard(participant)
        )
        return ConversationHandler.END

    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=get_events_keyboard()
    )
    return SELECTING_EVENT


def register_speaker_select_event(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    query = update.callback_query
    query.answer()

    if query.data == 'cancel':
        query.edit_message_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END

    event_id = int(query.data.split('_')[1])
    event = Event.objects.get(id=event_id)
    context.user_data['register_event'] = event

    query.edit_message_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ —Å–ø–∏–∫–µ—Ä–∞ –Ω–∞:\n"
        f"<b>{event.title}</b>\n"
        f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n\n"
        f"–í–∞—à–µ –∏–º—è: {query.from_user.full_name}\n"
        f"Username: @{query.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ])
    )
    return CONFIRMING_REGISTRATION


def register_speaker_confirm(update, context):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    user = query.from_user

    if query.data == 'confirm':
        try:
            event = context.user_data['register_event']

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏–∫–µ—Ä–∞
            speaker, created = Speaker.objects.update_or_create(
                telegram_id=user.id,
                defaults={
                    'name': user.full_name,
                    'telegram_username': user.username
                }
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
            speaker.events.add(event)

            # –ü–æ–º–µ—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ —Å–ø–∏–∫–µ—Ä–∞
            Participant.objects.update_or_create(
                telegram_id=user.id,
                defaults={
                    'name': user.full_name,
                    'telegram_username': user.username,
                    'is_speaker': True
                }
            )

            query.edit_message_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–∏–∫–µ—Ä –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
                f"<b>{event.title}</b>\n"
                f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}",
                parse_mode='HTML'
            )
        except Exception as e:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    else:
        query.edit_message_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

    return ConversationHandler.END


def subscribe_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
    user = update.effective_user

    try:
        participant = Participant.objects.get(telegram_id=user.id)

        if participant.is_subscribed:
            update.message.reply_text(
                "‚úÖ <b>–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!</b>",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
            return ConversationHandler.END

        update.message.reply_text(
            "üì¨ <b>–•–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É?</b>\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='subscribe_confirm')],
                [InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", callback_data='subscribe_cancel')]
            ])
        )
        return SUBSCRIBING

    except Participant.DoesNotExist:
        update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫.</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def subscribe_confirm(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    query.answer()
    user = query.from_user
    chat_id = query.message.chat_id

    if query.data == 'subscribe_confirm':
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            participant.is_subscribed = True
            participant.save()
            query.edit_message_text(  # Edit to clear inline buttons
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!</b>\n"
                     "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—à–∏ –∞–Ω–æ–Ω—Å—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå <b>–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫.</b>\n"
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )

    return ConversationHandler.END


def mailing_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    user = update.effective_user
    try:
        participant = Participant.objects.get(telegram_id=user.id)

        if not (participant.is_speaker or participant.is_manager):
            update.message.reply_text(
                "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–ø–∏–∫–µ—Ä–∞–º –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
            return ConversationHandler.END

        update.message.reply_text(
            "üì£ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
            "–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", callback_data='mailing_cancel')]
            ])
        )
    except Participant.DoesNotExist:
        query.edit_message_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )

    return MAILING


def mailing_receive_message(update, context):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    mailing_text = update.message.text
    context.user_data['mailing_text'] = mailing_text

    update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{mailing_text}",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='mailing_confirm')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='mailing_cancel')]
        ])
    )
    return CONFIRMING_MAILING


def mailing_confirm(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    query.answer()
    user = query.from_user
    chat_id = query.message.chat_id

    if query.data == 'mailing_confirm':
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            mailing_text = context.user_data['mailing_text']
            subscribed_participants = Participant.objects.filter(
                is_subscribed=True)

            if not subscribed_participants.exists():
                query.edit_message_text(
                    "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                    parse_mode='HTML'
                )
                context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå <b>–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>",
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard(participant)
                )
                return ConversationHandler.END

            sent_count = 0
            for participant in subscribed_participants:
                try:
                    context.bot.send_message(
                        chat_id=participant.telegram_id,
                        text=f"üì¢ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:</b>\n\n{mailing_text}",
                        parse_mode='HTML'
                    )
                    sent_count += 1
                except Exception as e:
                    print(
                        f"Failed to send message to {participant.telegram_id}: {str(e)}")

            query.edit_message_text(
                "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!</b>",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            try:
                participant = Participant.objects.get(telegram_id=user.id)
                query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
                    parse_mode='HTML'
                )
                context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b> {str(e)}",
                    parse_mode='HTML',
                    reply_markup=get_main_keyboard(participant)
                )
            except Participant.DoesNotExist:
                query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏",
                    parse_mode='HTML'
                )
                context.bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                    parse_mode='HTML',
                    reply_markup=ReplyKeyboardRemove()
                )
    else:
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )

    return ConversationHandler.END


def unsubscribe_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user = update.effective_user

    try:
        participant = Participant.objects.get(telegram_id=user.id)

        if not participant.is_subscribed:
            update.message.reply_text(
                "‚úÖ <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!</b>",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
            return ConversationHandler.END

        update.message.reply_text(
            "üì¨ <b>–•–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏?</b>\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='unsubscribe_confirm')],
                [InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", callback_data='unsubscribe_cancel')]
            ])
        )
        return UNSUBSCRIBING

    except Participant.DoesNotExist:
        update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫.</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def unsubscribe_confirm(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏"""
    query = update.callback_query
    query.answer()
    user = query.from_user
    chat_id = query.message.chat_id

    if query.data == 'unsubscribe_confirm':
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            participant.is_subscribed = False
            participant.save()
            query.edit_message_text(  # Edit to clear inline buttons
                "‚úÖ –û—Ç–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏!</b>\n"
                     "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—à–∏ –∞–Ω–æ–Ω—Å—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –û—Ç–ø–∏—Å–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )

    return ConversationHandler.END


def register_participant_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user = update.effective_user
    try:
        participant = Participant.objects.get(telegram_id=user.id)
    except Participant.DoesNotExist:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    events = Event.objects.filter(date__gte=timezone.now()).order_by('date')
    if not events.exists():
        update.message.reply_text(
            "üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(participant)
        )
        return ConversationHandler.END

    update.message.reply_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=get_events_keyboard()
    )
    return SELECTING_EVENT_PARTICIPANT


def register_participant_select_event(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    query = update.callback_query
    query.answer()

    if query.data == 'cancel':
        try:
            participant = Participant.objects.get(
                telegram_id=query.from_user.id)
            query.edit_message_text(
                "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='HTML'
            )
        return ConversationHandler.END

    event_id = int(query.data.split('_')[1])
    try:
        event = Event.objects.get(id=event_id)
        context.user_data['participant_event'] = event
        participant = Participant.objects.get(telegram_id=query.from_user.id)

        if event in participant.registered_events.all():
            query.edit_message_text(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞:\n"
                f"<b>{event.title}</b>\n"
                f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
            return ConversationHandler.END

        query.edit_message_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞:\n"
            f"<b>{event.title}</b>\n"
            f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n\n"
            f"–í–∞—à–µ –∏–º—è: {query.from_user.full_name}\n"
            f"Username: @{query.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
            ])
        )
        return CONFIRMING_PARTICIPANT_REGISTRATION
    except Event.DoesNotExist:
        query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END


def register_participant_confirm(update, context):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    query = update.callback_query
    query.answer()
    user = query.from_user
    chat_id = query.message.chat_id

    if query.data == 'confirm':
        try:
            event = context.user_data['participant_event']
            participant, created = Participant.objects.update_or_create(
                telegram_id=user.id,
                defaults={
                    'name': user.full_name,
                    'telegram_username': user.username
                }
            )
            participant.registered_events.add(event)
            query.edit_message_text(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
                f"<b>{event.title}</b>\n"
                f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Exception as e:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    else:
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            query.edit_message_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

    return ConversationHandler.END


def get_my_events_keyboard(participant):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫"""
    events = participant.registered_events.all().order_by('date')
    keyboard = [
        [InlineKeyboardButton(
            event.get_full_name(),
            callback_data=f"my_event_{event.id}"
        )]
        for event in events
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')])
    return InlineKeyboardMarkup(keyboard)


def my_events_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    user = update.effective_user
    try:
        participant = Participant.objects.get(telegram_id=user.id)
    except Participant.DoesNotExist:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    events = participant.registered_events.all()
    if not events.exists():
        update.message.reply_text(
            "üì≠ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
            parse_mode='HTML',
            reply_markup=get_main_keyboard(participant)
        )
        return ConversationHandler.END

    update.message.reply_text(
        "üìã <b>–í–∞—à–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
        parse_mode='HTML',
        reply_markup=get_my_events_keyboard(participant)
    )
    return SHOW_MY_EVENTS


def my_events_select_event(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"""
    query = update.callback_query
    query.answer()

    if query.data == 'cancel':
        try:
            participant = Participant.objects.get(telegram_id=query.from_user.id)
            query.edit_message_text(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML'
            )
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                parse_mode='HTML'
            )
        return ConversationHandler.END

    event_id = int(query.data.split('_')[2])
    try:
        event = Event.objects.get(id=event_id)
        context.user_data['unregister_event'] = event
        participant = Participant.objects.get(telegram_id=query.from_user.id)

        query.edit_message_text(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
            f"<b>{event.title}</b>\n"
            f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
            ])
        )
        return CONFIRMING_UNREGISTER
    except Event.DoesNotExist:
        query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return ConversationHandler.END


def my_events_confirm_unregister(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    query = update.callback_query
    query.answer()
    user = query.from_user
    chat_id = query.message.chat_id

    if query.data == 'confirm':
        try:
            event = context.user_data['unregister_event']
            participant = Participant.objects.get(telegram_id=user.id)
            if event in participant.registered_events.all():
                participant.registered_events.remove(event)
                query.edit_message_text(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
                    f"<b>{event.title}</b>\n"
                    f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}",
                    parse_mode='HTML'
                )
            else:
                query.edit_message_text(
                    f"‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞:\n"
                    f"<b>{event.title}</b>",
                    parse_mode='HTML'
                )
            context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Exception as e:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: {str(e)}")
    else:
        try:
            participant = Participant.objects.get(telegram_id=user.id)
            query.edit_message_text("‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                parse_mode='HTML',
                reply_markup=get_main_keyboard(participant)
            )
        except Participant.DoesNotExist:
            query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")

    return ConversationHandler.END


def send_new_event_notification(bot, event):
    """–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""

    subscribed_participants = Participant.objects.filter(is_subscribed=True)

    if not subscribed_participants.exists():
        print("No subscribed participants to notify about new event.")
        return 0

    sent_count = 0
    try:
        notification_text = (
            f"üéâ <b>–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ!</b>\n\n"
            f"üìÖ <b>{event.title}</b>\n"
            f"üïí –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n"
            f"üìú –ü—Ä–æ–≥—Ä–∞–º–º–∞:\n{event.get_program()}\n\n"
            f"<i>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å–ø–∏–∫–µ—Ä–∞–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞!</i>"
        )
    except Exception as e:
        print(f"Error generating notification text: {str(e)}")
        return 0

    for participant in subscribed_participants:
        try:
            bot.send_message(
                chat_id=participant.telegram_id,
                text=notification_text,
                parse_mode='HTML'
            )
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É —Å ID {participant.telegram_id}: {str(e)}")

    return sent_count


def networking(update, context):
    """–ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–æ–±—â–∞—Ç—å—Å—è¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    user = update.message.from_user
    participant, _ = Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )

    text = (
        "üåü <b>–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</b> üåü\n\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ:\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
        "1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n"
        "2. –°–º–æ—Ç—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö.\n"
        "3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
    )

    buttons = []
    if not participant.bio:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞
        buttons.append([InlineKeyboardButton("üìù –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ", callback_data="fill_profile")])
    buttons.append([InlineKeyboardButton("üëÄ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="view_profiles")])

    update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='HTML'
    )


def start_fill_profile(update, context):
    query = update.callback_query
    query.answer()

    participant = Participant.objects.get(telegram_id=query.from_user.id)
    if participant.bio:  # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
        query.edit_message_text(
            "‚úÖ –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É!\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÄ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="view_profiles")]
            ])
        )
        return ConversationHandler.END

    query.edit_message_text(
        "üìù <b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è):",
        parse_mode='HTML'
    )
    return AWAITING_NAME


def save_name(update, context):
    name = update.message.text
    context.user_data['name'] = name

    update.message.reply_text(
        "üíº –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫¬ª):"
    )
    return AWAITING_BIO


def save_bio(update, context):
    bio = update.message.text
    user = update.message.from_user

    is_first = not Participant.objects.exclude(telegram_id=user.id).exists()

    participant, created = Participant.objects.update_or_create(
        telegram_id=user.id,
        defaults={
            'name': context.user_data['name'],
            'bio': bio,
            'telegram_username': user.username,
            'is_first_in_networking': is_first,
            'notified_about_newcomers': False
        }
    )

    reply_text = "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —Å –≤–∞–º–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è."

    if is_first:
        reply_text += "\n\n‚ú® –í—ã –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–Ω–∞–∫–æ–º—Å—Ç–≤! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –¥—Ä—É–≥–∏–µ."
    else:
        check_for_newcomers()

    update.message.reply_text(
        reply_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÄ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data="view_profiles")]
        ])
    )
    return ConversationHandler.END


def check_for_newcomers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        first_user = Participant.objects.filter(is_first_in_networking=True).first()
        if not first_user or first_user.notified_about_newcomers:
            return

        new_users_count = Participant.objects.exclude(
            telegram_id=first_user.telegram_id
        ).count()

        if new_users_count >= 5:
            from telegram import Bot
            bot = Bot(token=settings.TG_BOT_TOKEN)

            bot.send_message(
                chat_id=first_user.telegram_id,
                text="üéâ –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å 5 –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", callback_data="view_profiles")]
                ])
            )

            first_user.notified_about_newcomers = True
            first_user.save()

    except Exception as e:
        import logging
        logging.error(f"–û—à–∏–±–∫–∞ –≤ check_for_newcomers: {e}")


def view_profiles(update, context):
    query = update.callback_query
    query.answer()

    participant = Participant.objects.get(telegram_id=query.from_user.id)
    other_profiles = Participant.objects.exclude(telegram_id=query.from_user.id).filter(bio__isnull=False)

    if not other_profiles.exists():
        query.edit_message_text("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    available_profiles = list(other_profiles)

    # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if 'viewed_profiles' not in context.user_data:
        context.user_data['viewed_profiles'] = []

    # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
    for profile in available_profiles:
        if profile.telegram_id not in context.user_data['viewed_profiles']:
            context.user_data['current_profile_id'] = profile.telegram_id
            context.user_data['viewed_profiles'].append(profile.telegram_id)

            text = (
                f"üë§ <b>{profile.name}</b>\n"
                f"üíº {profile.bio}\n\n"
                f"–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è?"
            )

            try:
                query.edit_message_text(
                    text,
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="request_contact"),
                            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="next_profile")
                        ]
                    ]),
                    parse_mode='HTML'
                )
                return VIEWING_PROFILE
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return VIEWING_PROFILE

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã
    context.user_data['viewed_profiles'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    query.edit_message_text("üò¢ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    return view_profiles(update, context)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞


def handle_profile_actions(update, context):
    query = update.callback_query
    query.answer()

    if query.data == "request_contact":
        profile = Participant.objects.get(telegram_id=context.user_data['current_profile_id'])
        query.edit_message_text(
            f"‚úâÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n"
            f"@{profile.telegram_username}" if profile.telegram_username else
            "‚ùå –£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram-username."
        )
        return ConversationHandler.END
    else:
        return view_profiles(update, context)


def back_to_menu(update, context):
    user = update.message.from_user
    participant, _ = Participant.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'telegram_username': user.username,
            'name': user.first_name or '–ê–Ω–æ–Ω–∏–º'
        }
    )
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(participant)
    )


def setup_dispatcher(dp):
    # –ö–æ–º–∞–Ω–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", start))
    dp.add_handler(CommandHandler("cancel", cancel))

    # ConversationHandler: –í–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É
    ask_speaker_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É$'), ask_speaker_start)],
        states={
            SELECTING_SPEAKER: [
                CallbackQueryHandler(ask_speaker_select, pattern='^ask_'),
                CallbackQueryHandler(ask_speaker_cancel, pattern='^back$'),
            ],
            AWAITING_QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, ask_speaker_receive_question),
                CallbackQueryHandler(ask_speaker_cancel, pattern='^cancel$'),
            ],
            CONFIRMING_QUESTION: [
                CallbackQueryHandler(ask_speaker_confirm, pattern='^confirm$'),
                CallbackQueryHandler(ask_speaker_cancel, pattern='^cancel$'),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', ask_speaker_cancel),
            CallbackQueryHandler(ask_speaker_cancel, pattern='^cancel$'),
        ],
        allow_reentry=True,
    )
    dp.add_handler(ask_speaker_conv)

    # ConversationHandler: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant_registration_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º$'), register_participant_start)],
        states={
            SELECTING_EVENT_PARTICIPANT: [
                CallbackQueryHandler(register_participant_select_event, pattern='^event_'),
                CallbackQueryHandler(register_participant_confirm, pattern='^cancel$'),
            ],
            CONFIRMING_PARTICIPANT_REGISTRATION: [
                CallbackQueryHandler(register_participant_confirm),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥$'), back_to_menu)
        ],
    )
    dp.add_handler(participant_registration_conv)

    # ConversationHandler: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏–∫–µ—Ä–∞
    registration_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^üé§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ø–∏–∫–µ—Ä–æ–º$'), register_speaker_start)],
        states={
            SELECTING_EVENT: [
                CallbackQueryHandler(register_speaker_select_event, pattern='^event_'),
                CallbackQueryHandler(register_speaker_confirm, pattern='^cancel$'),
            ],
            CONFIRMING_REGISTRATION: [
                CallbackQueryHandler(register_speaker_confirm),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥$'), back_to_menu)
        ],
    )
    dp.add_handler(registration_conv)

    # ConversationHandler: –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    my_events_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è$'), my_events_start)],
        states={
            SHOW_MY_EVENTS: [
                CallbackQueryHandler(my_events_select_event, pattern='^my_event_'),
                CallbackQueryHandler(my_events_confirm_unregister, pattern='^cancel$'),
            ],
            CONFIRMING_UNREGISTER: [
                CallbackQueryHandler(my_events_confirm_unregister),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    dp.add_handler(my_events_conv)

    # ConversationHandler: –î–æ–Ω–∞—Ç—ã (—Ñ–∏–∫—Å –∏ –∫–∞—Å—Ç–æ–º)
    donate_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_custom_donate_callback, pattern='^donate_custom$')],
        states={
            CHOOSE_CUSTOM_AMOUNT: [MessageHandler(Filters.text & ~Filters.command, handle_custom_amount)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    dp.add_handler(donate_conv_handler)

    # ConversationHandler: –ü–æ–¥–ø–∏—Å–∫–∞
    subscribe_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É$'), subscribe_start)],
        states={
            SUBSCRIBING: [
                CallbackQueryHandler(subscribe_confirm, pattern='^subscribe_(confirm|cancel)$'),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(subscribe_confirm, pattern='^subscribe_cancel$'),
        ],
    )
    dp.add_handler(subscribe_conv)

    # ConversationHandler: –û—Ç–ø–∏—Å–∫–∞
    unsubscribe_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏$'), unsubscribe_start)],
        states={
            UNSUBSCRIBING: [
                CallbackQueryHandler(unsubscribe_confirm, pattern='^unsubscribe_(confirm|cancel)$'),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(unsubscribe_confirm, pattern='^unsubscribe_cancel$'),
        ],
    )
    dp.add_handler(unsubscribe_conv)

    # ConversationHandler: –†–∞—Å—Å—ã–ª–∫–∞
    mailing_conv = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$'), mailing_start)],
        states={
            MAILING: [
                MessageHandler(Filters.text & ~Filters.command, mailing_receive_message),
            ],
            CONFIRMING_MAILING: [
                CallbackQueryHandler(mailing_confirm, pattern='^mailing_(confirm|cancel)$'),
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(mailing_confirm, pattern='^mailing_cancel$'),
        ],
    )
    dp.add_handler(mailing_conv)

    # ConversationHandler: –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥
    networking_conv = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('^üôã –ü–æ–æ–±—â–∞—Ç—å—Å—è$'), networking),
            CallbackQueryHandler(start_fill_profile, pattern='^fill_profile$'),
            CallbackQueryHandler(view_profiles, pattern='^view_profiles$')
        ],
        states={
            AWAITING_NAME: [MessageHandler(Filters.text & ~Filters.command, save_name)],
            AWAITING_BIO: [MessageHandler(Filters.text & ~Filters.command, save_bio)],
            VIEWING_PROFILE: [CallbackQueryHandler(handle_profile_actions)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥$'), back_to_menu)
        ],
        allow_reentry=True
    )
    dp.add_handler(networking_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.add_handler(MessageHandler(Filters.regex('^üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ$'), event_menu))
    dp.add_handler(MessageHandler(Filters.regex('^üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è$'), registration_menu))
    dp.add_handler(MessageHandler(Filters.regex('^üôã –ü–æ–æ–±—â–∞—Ç—å—Å—è$'), networking))  # –Ω–∞ —Å–ª—É—á–∞–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    dp.add_handler(MessageHandler(Filters.regex('^üéÅ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å$'), donate))
    dp.add_handler(MessageHandler(Filters.regex('^‚ùì –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã$'), show_unanswered_questions))
    dp.add_handler(MessageHandler(Filters.regex('^üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É$'), mailing_start))

    # –ü–æ–¥–º–µ–Ω—é "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    dp.add_handler(MessageHandler(Filters.regex('^üìú –ü—Ä–æ–≥—Ä–∞–º–º–∞$'), program))
    dp.add_handler(MessageHandler(Filters.regex('^üìã –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è$'), my_events_start))
    dp.add_handler(MessageHandler(Filters.regex('^‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É$'), ask_speaker_start))
    dp.add_handler(MessageHandler(Filters.regex('^üé§ –ö—Ç–æ –≤—ã—Å—Ç—É–ø–∞–µ—Ç —Å–µ–π—á–∞—Å\\?$'), current_speaker))
    dp.add_handler(MessageHandler(Filters.regex('^‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É$'), subscribe_start))
    dp.add_handler(MessageHandler(Filters.regex('^‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏$'), unsubscribe_start))
    dp.add_handler(MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥$'), back_to_menu))

    # –ü–æ–¥–º–µ–Ω—é "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    dp.add_handler(MessageHandler(Filters.regex('^üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º$'), register_participant_start))
    dp.add_handler(MessageHandler(Filters.regex('^üé§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–ø–∏–∫–µ—Ä–æ–º$'), register_speaker_start))
    dp.add_handler(MessageHandler(Filters.regex('^üîô –ù–∞–∑–∞–¥$'), back_to_menu))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤
    setup_speaker_handlers(dp)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤
    dp.add_handler(CallbackQueryHandler(handle_fixed_donate_callback, pattern='^donate_\\d+$'))

    return dp


def start_bot():
    updater = Updater(settings.TG_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    updater.bot.set_my_commands([
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"),
    ])

    dp = setup_dispatcher(dp)
    updater.start_polling()
    updater.idle()
